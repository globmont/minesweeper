#! /usr/bin/env python
import curses, time, sys
from curses import wrapper
from random import randint
from optparse import OptionParser


parser = OptionParser("Usage: %prog [options]")
parser.add_option("-r", "--rows", dest="rows", type='int', default=20, help="Number of rows on the board", metavar="N")
parser.add_option("-c", "--cols", dest="cols", type='int', default=25, help="Number of cols on the board", metavar="N")
parser.add_option("-m", "--mines", dest="mines", type='int', default=70, help="Number of mines on the board", metavar="N")


class Game(object):
    symbols = {'COVERED': '\u25A0', 'MINE': '*', 'FLAG': '\u25C0', 'QUESTION': '?', 'FLAG_WRONG': '#', 'MINE_TRIGGERED': '@', '0': '\u00B7', '1': '1', '2': '2', '3': '3', '4': '4', '5': '5', '6': '6', '7': '7', '8': '8'}
    def __init__(self, stdscr, rows, cols, num_mines):
        self.finished = False
        self.rows = rows
        self.cols = cols
        self.num_mines = num_mines
        # self.board = self.__generate_board(rows, cols, num_mines)
        self.display_board = [[Game.symbols['COVERED']] * cols for i in range(0, rows)]
        self.num_flags = 0
        self.game_won = False
        self.start_time = time.time()    
        self.stdscr = stdscr
        self.num_actions = 0

    def __str__(self):
        return '\n'.join([' '.join(row) for row in self.board])

    def __get_neighbors(self, row, col):
        neighbors = set()
        for row_offset in range(-1, 2):
            for col_offset in range(-1, 2):
                cell_row = row + row_offset
                cell_col = col + col_offset
                if not(cell_row < 0 or cell_col < 0 or cell_row > self.rows - 1 or cell_col > self.cols - 1):
                    neighbors.add((cell_row, cell_col))
        return list(neighbors)

    def __generate_board(self, rows, cols, num_mines, safe_row=0, safe_col=0):
        board = [[Game.symbols['COVERED']] * cols for i in range(0, rows)]
        num_mines_to_place = num_mines
        while num_mines_to_place > 0:
            row = randint(0, rows - 1)
            col = randint(0, cols - 1)
            if (row != safe_row or col != safe_col) and board[row][col] != Game.symbols['MINE']:
                board[row][col] = Game.symbols['MINE']
                num_mines_to_place -= 1

        for row in range(0, rows):
            for col in range(0, cols):
                if board[row][col] == Game.symbols['MINE']:
                    continue
                num_adj_mines = 0
                neighbors = self.__get_neighbors(row, col)
                for neighbor in neighbors:
                    if board[neighbor[0]][neighbor[1]] == Game.symbols['MINE']:
                        num_adj_mines += 1
                board[row][col] = Game.symbols[str(num_adj_mines)]
        return board

    def set(self, row, col, key, attrs=None, refresh=True):
        curr_pos = self.stdscr.getyx()
        symbol = Game.symbols.get(key, key)
        self.display_board[row][col] = symbol

        if symbol in set([Game.symbols['MINE'], Game.symbols['MINE_TRIGGERED']]):
            attrs = curses.color_pair(1)
        elif symbol == Game.symbols['FLAG']:
            attrs = curses.color_pair(3)
        elif symbol == Game.symbols['0']:
            attrs = curses.color_pair(4) | curses.A_DIM
        elif symbol in set([Game.symbols['1'], Game.symbols['2'], Game.symbols['3'], Game.symbols['4'], Game.symbols['5'], Game.symbols['6'], Game.symbols['7'], Game.symbols['8']]):
            attrs = curses.color_pair(0)
        else:
            attrs = curses.color_pair(2)

        self.stdscr.addstr(row + 1, col * 2 + 2, symbol, attrs)
        self.stdscr.move(*curr_pos)
        if refresh:
            self.stdscr.refresh()

    def draw_status(self):
        curr_pos = self.stdscr.getyx()
        time_diff = time.time() - self.start_time
        state = "In progress"
        state_color = curses.color_pair(0)
        if self.finished and self.game_won:
            state = "Game won!  "
            state_color = curses.color_pair(3)
        elif self.finished and not self.game_won:
            state = "Game lost. "
            state_color = curses.color_pair(1)
        if 2 * self.cols + 19 <= curses.COLS:
            if curses.LINES >= 5:
                self.stdscr.addstr(1, 2 * self.cols + 3, 'Status', curses.A_BOLD | curses.A_UNDERLINE)
                self.stdscr.addstr(2, 2 * self.cols + 3, "Time: {:02d}:{:02d}:{:02d}".format(int(time_diff / 3600), int((time_diff % 3600) / 60), int(time_diff % 60)))
                self.stdscr.addstr(3, 2 * self.cols + 3, "Remaining: {:d}   ".format(self.num_mines - self.num_flags))
                self.stdscr.addstr(4, 2 * self.cols + 3, "State: {:s}".format(state), state_color)

            if curses.LINES >= 14:
                self.stdscr.addstr(6, 2 * self.cols + 3, "Key", curses.A_BOLD | curses.A_UNDERLINE)
                self.stdscr.addstr(7, 2 * self.cols + 3, Game.symbols['COVERED'] + "  undiscovered", curses.color_pair(2))
                self.stdscr.addstr(8, 2 * self.cols + 3, Game.symbols['FLAG'] + "  flag", curses.color_pair(3))
                self.stdscr.addstr(9, 2 * self.cols + 3, Game.symbols['FLAG_WRONG'] + "  incorrect flag", curses.color_pair(2))
                self.stdscr.addstr(10, 2 * self.cols + 3, Game.symbols['QUESTION'] + "  unsure", curses.color_pair(2))
                self.stdscr.addstr(11, 2 * self.cols + 3, Game.symbols['MINE'] + "  unfound mine", curses.color_pair(1))
                self.stdscr.addstr(12, 2 * self.cols + 3, Game.symbols['MINE_TRIGGERED'] + "  triggered mine", curses.color_pair(1))
                self.stdscr.addstr(13, 2 * self.cols + 3, Game.symbols['0'] + "  0 nearby mines", curses.color_pair(4) | curses.A_DIM)

            if curses.LINES >= 20:
                self.stdscr.addstr(15, 2 * self.cols + 3, "Controls", curses.A_BOLD | curses.A_UNDERLINE)
                self.stdscr.addstr(16, 2 * self.cols + 3, "Uncover tile: <space>")
                self.stdscr.addstr(17, 2 * self.cols + 3, "Move cursor: arrows/hjkl")
                self.stdscr.addstr(18, 2 * self.cols + 3, "Mark tile: f/o")
                self.stdscr.addstr(19, 2 * self.cols + 3, "Quit: q")
        self.stdscr.move(*curr_pos)

    def win(self):
        self.finished = True
        self.game_won = True
        self.draw_status()

    def lose(self):
        self.finished = True
        self.game_won = False
        for row in range(0, self.rows):
            for col in range(0, self.cols):
                if self.board[row][col] == Game.symbols['MINE'] and self.display_board[row][col] != Game.symbols['FLAG']:
                    self.set(row, col, 'MINE')
                if self.board[row][col] != Game.symbols['MINE'] and self.display_board[row][col] == Game.symbols['FLAG']:
                    self.set(row, col, 'FLAG_WRONG')

        self.draw_status()

    def display(self):
        return '\n'.join([' '.join(row) for row in self.display_board])

    def uncover(self, row, col):
        if self.display_board[row][col] not in [Game.symbols['COVERED'], Game.symbols['QUESTION']]:
            return
        self.num_actions += 1
        if self.num_actions == 1:
            self.board = self.__generate_board(self.rows, self.cols, self.num_mines, row, col)

        if self.board[row][col] == Game.symbols['MINE']:
            self.lose()
            self.set(row, col, 'MINE_TRIGGERED')
        elif self.board[row][col] == Game.symbols['0']:
            # do bfs to expand
            queue = [(row, col)]
            visited = set()
            while len(queue) > 0:
                curr_pos = queue.pop()
                visited.add(curr_pos)
                if self.display_board[curr_pos[0]][curr_pos[1]] == Game.symbols['FLAG']:
                    self.num_flags -= 1
                self.set(curr_pos[0], curr_pos[1], self.board[curr_pos[0]][curr_pos[1]], refresh=True)
                time.sleep(.0005)
                for neighbor in self.__get_neighbors(curr_pos[0], curr_pos[1]):
                    if neighbor in visited:
                        continue
                    if self.board[neighbor[0]][neighbor[1]] == Game.symbols['0'] and neighbor not in queue:
                        queue.insert(0, neighbor)
                    elif self.board[neighbor[0]][neighbor[1]] not in set([Game.symbols['MINE'], Game.symbols['FLAG']]):
                        self.set(neighbor[0], neighbor[1], self.board[neighbor[0]][neighbor[1]], refresh=False)
            self.stdscr.refresh()
        else:
            self.set(row, col, self.board[row][col])

    def mark(self, row, col):
        if self.display_board[row][col] == Game.symbols['FLAG']:
            self.set(row, col, 'QUESTION')
            self.num_flags -= 1
        elif self.display_board[row][col] == Game.symbols['QUESTION']:
            self.set(row, col, 'COVERED')
        elif self.display_board[row][col] == Game.symbols['COVERED']:
            if self.num_actions == 0:
                return
            self.set(row, col, 'FLAG')
            self.num_flags += 1

            if self.num_flags > self.num_mines:
                self.mark(row, col)
                return

            all_flagged = True
            for row in range(0, self.rows):
                for col in range(0, self.cols):
                    if self.board[row][col] == Game.symbols['MINE']:
                        all_flagged = all_flagged and self.display_board[row][col] == Game.symbols['FLAG']

            if all_flagged:
                self.win()
        self.num_actions += 1

def redraw(stdscr, game):
    curr_row, curr_col = stdscr.getyx()

    for row in range(0, game.rows):
        for col in range(0, game.cols):
            game.set(row, col, game.display_board[row][col])
    game.draw_status()


    stdscr.move(curr_row, curr_col)
    stdscr.refresh()

def main(stdscr):

    options, args = parser.parse_args()

    options.rows = min(options.rows, curses.LINES)
    options.cols = min(options.cols, int(curses.COLS / 2))
    # options.mines = min(options.mines, int(options.rows * options.cols / 7.1)) # magic number

    game = Game(stdscr, options.rows, options.cols, options.mines)

    stdscr.clear()
    curses.halfdelay(10)
    stdscr.border(0)
    stdscr.move(1, 2)
    stdscr.refresh()
    curses.init_pair(1, curses.COLOR_RED, curses.COLOR_BLACK)
    curses.init_pair(2, curses.COLOR_BLUE, curses.COLOR_BLACK)
    curses.init_pair(3, curses.COLOR_GREEN, curses.COLOR_BLACK)
    curses.init_pair(4, curses.COLOR_MAGENTA, curses.COLOR_BLACK)
    redraw(stdscr, game)

    while True:
        if not game.finished:
            game.draw_status()
        try:
            key = stdscr.getkey().lower()
        except:
            continue
        curr_row, curr_col = stdscr.getyx()
        if key == 'key_left' or key == 'h':
            if curr_col > 2:
                stdscr.move(curr_row, curr_col - 2)
        elif key == 'key_right' or key == 'l':
            if curr_col < game.cols * 2:
                stdscr.move(curr_row, curr_col + 2)
        elif key == 'key_up' or key == 'k':
            if curr_row > 1:
                stdscr.move(curr_row - 1, curr_col)
        elif key == 'key_down' or key == 'j':
            if curr_row < game.rows:
                stdscr.move(curr_row + 1, curr_col)
        elif key == ' ' and not game.finished:
            game.uncover(curr_row - 1, int(curr_col / 2) - 1)
            # redraw(stdscr, game)
        elif (key == 'f' or key == 'o') and not game.finished:
            game.mark(curr_row - 1, int(curr_col / 2) - 1)
            # redraw(stdscr, game)
        elif key == 'q':
            return


if __name__ == '__main__':
    wrapper(main)